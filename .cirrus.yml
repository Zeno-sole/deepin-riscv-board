compute_engine_instance:
  image_project: cirrus-images
  image: family/docker-builder
  platform: linux
  cpu: 8
  memory: 16G

env:
  CROSS_COMPILE: riscv64-linux-gnu-
  ARCH: riscv
  SKIP_INSTALL_PACKAGE: no
  HOME: /tmp/cirrus-ci-build/
  OUT_DIR: /tmp/cirrus-ci-build/output
  DEVICE: /dev/loop100
  DISTURB: deepin
  DEEPIN_REPO: https://mirror.iscas.ac.cn/deepin-riscv/deepin-stage1/
  DEEPIN_BASE_ROOTFS: https://mirror.iscas.ac.cn/deepin-riscv/deepin-stage1/deepin-beige-stage1-dde.tar.gz
  KBUILD_BUILD_USER: deepin-riscv-sig
  KBUILD_BUILD_HOST: deepin-riscv-builder
  GITHUB_TOKEN: ENCRYPTED[7aafa8514d8601470288e2ca86822fba2941bf8504b44c611731a5f22151f9ed4c807842a56f3a8a028e1e65ed1d3a03]

task:
  machine_init_script: |
    scripts/machine_init.sh

  install_qemu_script: |
    scripts/qemu_setup.sh

  install_build_script: |
    scripts/install_deps.sh

  download_root_tarball_script: |
    wget -O deepin-rootfs.tar.gz ${DEEPIN_BASE_ROOTFS}

  create_rootfsimg_script: |
    if [ x"${base_path}" = x"visionfive" ]; then
      sfdisk rootfs.img < common/part-table.conf
      losetup -P "${DEVICE}" rootfs.img
      mkfs.ext4 "${DEVICE}"p3
      mkfs.ext4 "${DEVICE}"p4
      mkfs.vfat -F32 "${DEVICE}"p2
      mount "${DEVICE}"p4 rootfs
      mkdir rootfs/boot
      mount "${DEVICE}"p3 rootfs/boot
      mkdir rootfs/boot/efi
      mount "${DEVICE}"p2 rootfs/boot/efi
    elif [ x"${base_path}" = x"visionfive-2" ]; then
      sfdisk rootfs.img < common/part-table.conf
      losetup -P "${DEVICE}" rootfs.img
      mkfs.vfat -F32 "${DEVICE}"p3
      mkfs.ext4 "${DEVICE}"p4
      mkfs.vfat -F32 "${DEVICE}"p2
      mount "${DEVICE}"p4 rootfs
      mkdir rootfs/boot
      mount "${DEVICE}"p3 rootfs/boot
      mkdir rootfs/boot/efi
      mount "${DEVICE}"p2 rootfs/boot/efi
    elif [ x"${base_path}" = x"d1" ]; then
      losetup -P "${DEVICE}" rootfs.img
      parted -s -a optimal -- "${DEVICE}" mklabel gpt
      parted -s -a optimal -- "${DEVICE}" mkpart primary fat32 40MiB 500MiB
      parted -s -a optimal -- "${DEVICE}" set 1 esp on
      parted -s -a optimal -- "${DEVICE}" mkpart primary ext4 500MiB 1000MiB
      parted -s -a optimal -- "${DEVICE}" mkpart primary ext4 1000MiB 100%
      partprobe "${DEVICE}"
      mkfs.vfat -F32 -n efi "${DEVICE}p1"
      mkfs.ext4 -F -L boot "${DEVICE}p2"
      mkfs.ext4 -F -L root "${DEVICE}p3"
      mount "${DEVICE}p3" rootfs
      mkdir rootfs/boot
      mount "${DEVICE}p2" rootfs/boot
      mkdir rootfs/boot/efi
      mount "${DEVICE}p1" rootfs/boot/efi
    elif [ x"${base_path}" = x"sifive" ]; then
      losetup -P "${DEVICE}" rootfs.img
      parted -s -a optimal -- "${DEVICE}" mklabel gpt
      parted -s -a optimal -- "${DEVICE}" mkpart primary fat32 40MiB 500MiB
      parted -s -a optimal -- "${DEVICE}" set 1 esp on
      parted -s -a optimal -- "${DEVICE}" mkpart primary ext4 500MiB 1000MiB
      parted -s -a optimal -- "${DEVICE}" mkpart primary ext4 1000MiB 100%
      partprobe "${DEVICE}"
      mkfs.vfat -F32 -n efi "${DEVICE}p1"
      mkfs.ext4 -F -L boot "${DEVICE}p2"
      mkfs.ext4 -F -L root "${DEVICE}p3"
      mount "${DEVICE}p3" rootfs
      mkdir rootfs/boot
      mount "${DEVICE}p2" rootfs/boot
      mkdir rootfs/boot/efi
      mount "${DEVICE}p1" rootfs/boot/efi
    fi

  unpack_root_tarball_script: |
    pushd rootfs
      tar xpvf ../deepin-rootfs.tar.gz --xattrs-include='*.*' --numeric-owner
    popd

  mount_and_setup_script: |
    scripts/rootfs_setup.sh

  update_root_tarball_script: |
    scripts/update_rootfs.sh

  matrix:
    - name: sifive
      env:
        base_path: sifive
        kernel_branch: linux-6.0.y
        kernel_git: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
        kernel_config: defconfig
        opensbi_branch: v1.1
        opensbi_git: https://github.com/riscv-software-src/opensbi.git
        uboot_branch: v2023.01-rc1
        uboot_git: https://github.com/u-boot/u-boot.git
        uboot_config: sifive_unmatched_defconfig
      kernel_script: |
        cp -v ./rootfs/boot/config-* ./rootfs/boot/latest-config
        echo "Skip & install maintain-kernel"
        # git clone --depth=1 -b ${kernel_branch} ${kernel_git} kernel
        # pushd kernel
        #   make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv ${kernel_config}
        #   if [ -f ../${base_path}/kernelconfig ]; then
        #     cp -v ../${base_path}/kernelconfig .config
        #   fi
        #   sed -i '/CONFIG_LOCALVERSION_AUTO/d' .config && echo "CONFIG_LOCALVERSION_AUTO=n" >> .config
        #   make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv -j$(nproc)
        #   if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
        #     make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
        #   fi
        #   make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot install -j$(nproc)
        #   make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv bindeb-pkg -j$(nproc)
        #   # Install DTB
        #   cp -v arch/riscv/boot/dts/sifive/hifive-unmatched-a00.dtb ../rootfs/boot/

        #   # Copy kernel Deb to root HOME
        #   cp -v ../*.deb ../rootfs/root/

        #   cp -v .config ../rootfs/boot/latest-config
        #   ls -al ../rootfs/boot/
        # popd

      uboot_script: |
        DIR='opensbi'
        git clone --depth=1 -b ${opensbi_branch} ${opensbi_git} ${DIR}
        pushd ${DIR}
          make CROSS_COMPILE="${CROSS_COMPILE}" PLATFORM=generic
        popd
        cp opensbi/build/platform/generic/firmware/fw_dynamic.bin ${OUT_DIR}

        DIR='u-boot'
        git clone --depth=1 -b ${uboot_branch} ${uboot_git} ${DIR}
        pushd ${DIR}
          make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" ${uboot_config}
          make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" OPENSBI="${OUT_DIR}/fw_dynamic.bin" -j$(nproc)
        popd
        cp ${DIR}/spl/u-boot-spl.bin "${OUT_DIR}"
        cp ${DIR}/u-boot.itb "${OUT_DIR}"

      install_grub_script: |
        mkdir -p rootfs/boot/efi/efi/boot
        cp -v common/grubriscv64.efi rootfs/boot/efi/efi/boot/bootriscv64.efi
        export kernel_version=$(ls rootfs/boot/ | grep vmlinux- | sed 's/vmlinux-//' | head -n 1 )
        cp -v $base_path/grub.cfg rootfs/boot/
        sed -i "s/custom_kernel_version/$kernel_version/g" rootfs/boot/grub.cfg

    - name: visionfive
      env:
        base_path: visionfive
        kernel_branch: visionfive
        kernel_git: https://github.com/starfive-tech/linux.git
        kernel_config: visionfive_defconfig
      kernel_script: |
        git clone --depth=1 -b ${kernel_branch} ${kernel_git} kernel
        pushd kernel
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv ${kernel_config}
          if [ -f ../${base_path}/kernelconfig ]; then
            cp -v ../${base_path}/kernelconfig .config
          fi
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' .config && echo "CONFIG_LOCALVERSION_AUTO=n" >> .config
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv -j$(nproc)
          if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
            make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
          fi
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot install -j$(nproc)
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv bindeb-pkg -j$(nproc)
          # Install DTB
          cp -v arch/riscv/boot/dts/starfive/jh7100-starfive-visionfive-v1.dtb ../rootfs/boot/
          cp -v arch/riscv/boot/dts/starfive/jh7100-beaglev-starlight.dtb ../rootfs/boot/

          # Copy kernel Deb to root HOME
          cp -v ../*.deb ../rootfs/root/

          cp -v .config ../rootfs/boot/latest-config
          ls -al ../rootfs/boot/
        popd

      install_grub_script: |
        mkdir -p rootfs/boot/efi/EFI/${DISTURB}
        cp -v common/grubriscv64.efi rootfs/boot/efi/EFI/${DISTURB}/
        mkdir -p rootfs/boot/boot
        cp -v $base_path/uEnv.txt rootfs/boot/boot
        export kernel_version=$(ls rootfs/boot/ | grep vmlinuz- | sed 's/vmlinuz-//' | head -n 1 )
        cp -v $base_path/grub.cfg rootfs/boot/
        sed -i "s/custom_kernel_version/$kernel_version/g" rootfs/boot/grub.cfg

    - name: visionfive-2
      env:
        base_path: visionfive-2
        kernel_branch: VF2_v2.5.0
        kernel_git: https://github.com/starfive-tech/linux
        kernel_config: starfive_visionfive2_defconfig
      kernel_script: |
        git clone --depth=1 -b ${kernel_branch} ${kernel_git} kernel
        pushd kernel
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv ${kernel_config}
          if [ -f ../${base_path}/kernelconfig ]; then
            cp -v ../${base_path}/kernelconfig .config
          fi
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv -j$(nproc)
          if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
            make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
          fi
          # make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot zinstall -j$(nproc)
          # Install DTB
          cp -v arch/riscv/boot/dts/starfive/jh7110-visionfive-v2.dtb ../rootfs/boot/
          cp -v .config ../rootfs/boot/latest-config

          # Install Kernel
          cp -v arch/riscv/boot/Image ../rootfs/boot/
          cp -v arch/riscv/boot/Image.gz ../rootfs/boot/
          ls -al ../rootfs/boot/
        popd

      install_uboot_script: |
        cp -v $base_path/vf2_uEnv.txt rootfs/boot/

    - name: d1
      env:
        base_path: d1
        kernel_branch: riscv/d1-wip
        kernel_git: https://github.com/smaeul/linux.git
        kernel_config: nezha_defconfig
        opensbi_branch: d1-wip
        opensbi_git: https://github.com/smaeul/opensbi.git
        uboot_branch: d1-wip
        uboot_git: https://github.com/smaeul/u-boot.git
        uboot_config: nezha_defconfig

      kernel_script: |
        git clone --depth=1 -b ${kernel_branch} ${kernel_git} kernel
        pushd kernel
          export DIR=$PWD
          echo "CONFIG_LOCALVERSION=${KERNEL_RELEASE}" >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_WIRELESS=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_CFG80211=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable /proc/config.gz
          echo 'CONFIG_IKCONFIG=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_IKCONFIG_PROC=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # There is no LAN. so let there be USB-LAN
          echo 'CONFIG_USB_NET_DRIVERS=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_CATC=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_KAWETH=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_PEGASUS=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_RTL8150=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_RTL8152=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_LAN78XX=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_USBNET=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_AX8817X=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_AX88179_178A=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CDCETHER=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CDC_EEM=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CDC_NCM=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_HUAWEI_CDC_NCM=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CDC_MBIM=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_DM9601=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_SR9700=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_SR9800=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_SMSC75XX=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_SMSC95XX=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_GL620A=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_NET1080=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_PLUSB=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_MCS7830=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_RNDIS_HOST=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CDC_SUBSET_ENABLE=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CDC_SUBSET=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_ALI_M5632=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_AN2720=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_BELKIN=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_ARMLINUX=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_EPSON2888=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_KC2190=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_ZAURUS=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CX82310_ETH=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_KALMIA=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_QMI_WWAN=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_INT51X1=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_IPHETH=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_SIERRA_NET=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_VL600=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_CH9200=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_NET_AQC111=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_USB_RTL8153_ECM=m' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable systemV IPC (needed by fakeroot during makepkg)
          echo 'CONFIG_SYSVIPC=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_SYSVIPC_SYSCTL=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable swap
          echo 'CONFIG_SWAP=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_ZSWAP=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable Cedrus VPU Drivers
          echo 'CONFIG_MEDIA_SUPPORT=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_MEDIA_CONTROLLER=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_MEDIA_CONTROLLER_REQUEST_API=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_V4L_MEM2MEM_DRIVERS=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_VIDEO_SUNXI_CEDRUS=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable binfmt_misc
          echo 'CONFIG_BINFMT_MISC=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable EFI
          echo 'CONFIG_EFI=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_EFI_ZBOOT=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          # enable fat
          echo 'CONFIG_VFAT_FS=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-15"' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_FAT_DEFAULT_UTF8=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_EXFAT_FS=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_NLS_CODEPAGE_437=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_NLS_ISO8859_15=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_NLS_DEFAULT="utf8"' >> ${DIR}/arch/riscv/configs/nezha_defconfig
          echo 'CONFIG_NLS_UTF8=y' >> ${DIR}/arch/riscv/configs/nezha_defconfig

          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv ${kernel_config}
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' .config && echo "CONFIG_LOCALVERSION_AUTO=n" >> .config
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv -j$(nproc)
          if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
            make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
          fi
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot install -j$(nproc)
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv dtbs
          make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv bindeb-pkg -j$(nproc)
          # Install DTB
          cp -v arch/riscv/boot/dts/allwinner/sun20i-d1-mangopi-mq-pro.dtb ../rootfs/boot/
          cp -v arch/riscv/boot/dts/allwinner/sun20i-d1-nezha.dtb ../rootfs/boot/
          cp -v arch/riscv/boot/dts/allwinner/sun20i-d1-lichee-rv-dock.dtb ../rootfs/boot/
          
          # Copy kernel Deb to root HOME
          cp -v ../*.deb ../rootfs/root/

          # Backup kernel build config
          cp -v .config ../rootfs/boot/latest-config
          ls -al ../rootfs/boot/

          git clone https://github.com/lwfinger/rtl8723ds.git
          pushd rtl8723ds
            make CROSS_COMPILE=${CROSS_COMPILE} ARCH=${ARCH} KSRC=../ -j$(nproc) modules || true
          popd
          for kernel_version in $(ls ../rootfs/lib/modules/);
          do
            install -D -p -m 644 "rtl8723ds/8723ds.ko" \
              "../rootfs/lib/modules/${kernel_version}/kernel/drivers/net/wireless/8723ds.ko"
            depmod -a -b "../rootfs" "${kernel_version}"
            echo '8723ds' >> 8723ds.conf
            mv 8723ds.conf "../rootfs/etc/modules-load.d/"
          done
        popd

      uboot_script: |
        DIR='opensbi'
        git clone --depth=1 -b ${opensbi_branch} ${opensbi_git} ${DIR}
        pushd ${DIR}
          make CROSS_COMPILE="${CROSS_COMPILE}" PLATFORM=generic FW_PIC=y FW_OPTIONS=0x2
        popd
        cp opensbi/build/platform/generic/firmware/fw_dynamic.bin ${OUT_DIR}

        DIR='u-boot'
        git clone --depth=1 -b ${uboot_branch} ${uboot_git} ${DIR}
        pushd ${DIR}
          make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" ${uboot_config}
          make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" OPENSBI="${OUT_DIR}/fw_dynamic.bin" -j$(nproc)
        popd
        cp ${DIR}/u-boot-sunxi-with-spl.bin "${OUT_DIR}"

      flash_boot_spl_script: |
        dd if="${OUT_DIR}/u-boot-sunxi-with-spl.bin" of="${DEVICE}" bs=1024 seek=128

      install_grub_script: |
        mkdir -p rootfs/boot/efi/efi/boot/
        cp -v common/grubriscv64.efi rootfs/boot/efi/efi/boot/bootriscv64.efi
        mkdir -p rootfs/boot/boot
        cp -v $base_path/uEnv.txt rootfs/boot/boot
        export kernel_version=$(ls rootfs/boot/ | grep vmlinuz- | sed 's/vmlinuz-//' | head -n 1 )
        cp -v $base_path/grub.cfg rootfs/boot/
        sed -i "s/custom_kernel_version/$kernel_version/g" rootfs/boot/grub.cfg

  clean_rootfs_script: |
    scripts/clean_rootfs.sh

  upload_publish_script: |
    scripts/publish.sh

  kernel_build_artifacts:
    path: "${DISTURB}-kernel-${base_path}-*.tar.zst"

  upload_artifacts:
    path: "${DISTURB}-*-*.img.zst*"
